1.Java Introduction(JDK,JRE,JVM)

Java was created in 1991 but was released in 1995, and it was developed by James Gosling at Sun MicroSystems and later acquired by Oracle.
    *** Usage: Mobile Application, Web Application, Desktop Application, Gaming Application.
    *** Features :
                    1.Object-Oriented.          (everything happens in java happens around object)
                    2.Platform Independent.
                    3.Strong Type-Checking.
                    4.Compile & Interpret
                    5.Garbage collector         (it removes unused variables and objects from memory)
                    6.Multi-threading           (OS ==> Processor ==> Threads)
                    7.Secure                    (doesn't have pointers which leads to memory leakage like C and C++)
                    8.Robust

                   Java Source Code ==> Java Compiler ==> Java Byte Code ==> Java Interpreter ==> Machine Code
                        .java             Compilation         .class            Interpret           Output

    *** Java Compiler      = Java compiler compiles the Java source code into the Java bytecode.
    *** Java Interpreter   = Java interpreter converts or translates the bytecode into the machine-understandable format i.e. machine code.

JDK (Java Development Kit)
    JRE (Java Runtime Environment)
        JVM (Java Virtual Machine), Class Libraries, Other Libraries.

2&3 installation.

4.Primitive DataTypes = byte, short, int, long, float, double, boolean, char.
                        ** Primitive DataTypes are supported by Java
5.NonPrimitive DataTypes = String, array, class.
                        ** String is a collection of continuous sequence of Characters of same data type.
                        ** String and Arrays are immutable
                        ** Custom in nature
                        ** Array Exception = ArrayIndexOutOfBound

6.Token = pre_defined Keywords, Identifiers, Constant, Special Symbols, Operators.

7.Datatype Casting / Conversion =
                                1.Implicit Datatype casting/conversion, small ==> large ==> largest
                                2.Explicit Datatype casting/conversion. small <== large <== largest

8.Package = Package is a folder which contains related files
            SupperClass = java.lang.Object.
            System is a Class;
            out,in,err = stream
            println(), print(), printf() = method
        *** new keyword is used to initialize anything in Java***

9.Array =   Array is a collection of continuous sequence of Elements of same data type.
            Array is immutable
            index(length-1);
            Array Exception = ArrayIndexOutOfBound

*** Operators ***

10.Arithmetic Operator(+,-,/,*,%)

11.Unary Operator = increment, decrement (++,--,!,+,-) (+1 used with 1 variables)

12. 1)Comparison/Relational Operator = (==,!=,<,>,<=,>=)
    *** if(Comparison/Relational Operator){}
    2)Logical Operator = (&& , ||) OR (AND , ||)

Assignment Operator (=)
13.Bitwise (Ignore)

*** Statements ***

14.If Else Statement
15. 1)Nested If (If inside If) next block is dependent on previous block
    2)Ternary operator (condition ? true : false) only if you one statement
16.Switch Statement.
17. 2D Array ([][])     x-y axis
    1D Array ([])       x-axis
18. 3D Array ([][][])   x-y-z axis

***Loop***

19.do While Loop
20.while Loop       while(boolean)
21.for Loop (iterate)
22.Enhanced ForLoop (used in Arrays, List, Map)
23.Nested For Loop

24 & 25.Collections:
Set = unique             = add
list = duplicate, index. = add
Map<key, value>          = put

Queue = FIFO
Stack = LIFO

            26.ArrayList.
            List<String> name = new Arraylist<>();
              Interface           class
            Exception = IndexOutOfBoundsException

            27.LinkedList = add, addFirst, addLast, remove, removeFirst, removeLast.
            28.HashSet = no duplicates random access element collection list (if you run the hashset again and again you can see different orders). stored in random order
            29.TreeSet = no duplicates and natural order of sequence ( a-z ) like sorting.
            30.Map = "Key" are unique and stored as "Set" class because "Set" class does not allow duplicates.
                    "value" can be duplicates and are stored in "list" class.
            31.HashMap = (key, value) called "Entry"
                        stored in random order.
                        containsKey();
                        for (String keys : details.keySet()
                                     ) {
                                    System.out.println("key: "+ keys + " " + "\tValue: " + details.get(keys));
                                }

                        for (Map.Entry<String, String> dkeys:details.entrySet()
                                     ) {
                                    System.out.println("key: "+ dkeys.getKey() + " " + "\tValue: " + dkeys.getValue());
                                }
            Eg: Map.Entry<Integer, String> b : has.entrySet()
                b.getKey(), b.getValue()
            32.TreeMap = (key, value) called "Entry"
                        sorting is only performed on keys but not on values.
                        Eg: Map.Entry<Integer, String> b : has.entrySet()
                            b.getKey(), b.getValue()
                            = natural sorting order i.e (a-z)(0-9).
                            = only keys are sorted

            33.Stack = LIFO
                    = push is to used to insert element.
                    = pop is to used to take element out of the stack.
                    = peek is to used to view not to remove.

            34.Queue = FIFO ( 1st element = Head || Last element = Tail)
                    = add
                    = remove = can only remove the element
                    = peek
                    = poll = remove the element and return the element (see the head and remove the head)

35.Class = class is a blueprint which is required to create an object and its logical entity.
36.Constructor = A Constructor is a special kind of method.
37.Streams =         List<Integer> str = num.stream().map(x -> x*x).collect(Collectors.toList());
                  List<Integer> add = num.stream().map(x->x+x).collect(Collectors.toList());
                  //collect(Collectors.toList()); to convert stream to list
                  //map(x->x+x) formula

38.Streams Filter = collect(Collectors.toSet()); //to convert stream to set
            List<String> filterResults = languages.stream().filter(x->x.startsWith("P")).collect(Collectors.toList());
39.sorted For Each = languages.stream().forEach(y-> System.out.println(y));
40.
41.Stream Reduce :  Identity     = an element that is the initial value of the reduction operation and default result if the stream is empty.
                    Accumulator = a function that takes two parameters,
                    a partial result of the reduction operation and the next element of the stream.
                    Combiner    = a function uded to combine the partial result of the reduction operation when the reduction is parallelized
            int sum = numList.stream().reduce(0,(ans,i)->ans+i);

42.Access Modifiers =  Public       (Class, Package, SubClass, World (outside the Package)).
                       Protected    (Class, Package, SubClass(of SuperClass of same Package)).
                       Default      (Class, Package).   (No Modifier)
                       Private      (Class).

43.Inheritance (IS-A relation)=
***     Super keyword has to be first statement in constructor.
              SubClass extends SuperClass
              ChildClass extends ParentClass
              DerivedClass extends BaseClass

44.Encapsulation: To hide the properties of a class from other class.
                private attributes / properties/ variables (to hide properties from the world)

45.Abstraction =
              1) abstract class should have at least one abstract method.
              2) can have normal class
              3)It cannot be instantiated and cannot have default constructor
              3)But when Child class extends Parent class then Child class constructor can invoke Parent class constructor indirectly.
              Parent child                              = new Child();
              reference of Parent abstract class        //concrete class object
              child.name();                            //method from child class will be called
Reference can be abstract class;

46.Interface = 1.Can have only Constants(public static final).
            2.Total Abstract.
            3.Only declare methods but not implement
            4.Subclass implements SuperClass
            5.Override means SubClass method is overriding the SuperClass method
            6.Interface can instantiate with Anonymous Class.
Reference can be Interface;

47.Multiple Inheritance:
            1.Multiple Inheritance is not supported in Java using Classes.
            2.Multiple Inheritance is supported in Java using Interfaces.
            3.In multiple inheritance of interface
            Reference should be class

Polymorphism
48.Method OverLoading :
            1.Name of the method should be same.
            2.No of Parameters can change.
            3.Parameter Datatype can change.

49.MethodOverRiding:
        *** Instance method belongs to object
        *** static method belongs to class.
        *** SuperClass Static Method to SubClass Instance Method = error;
        *** SuperClass Instance Method to Subclass static Method = error;
        *** SuperClass Static Method to Subclass static Method   = Hides

            1.MethodOverRiding is used with the help of Inheritance.
            2.Instance method / Instance variable belongs to object.
            3.Static method / Static variable belongs to class.
            4.Static method are called by Class
            5.Static method cannot be overRide.
            Eg : className.StaticMethodName.
            Eg : className.StaticVariableName.

50.Static = 1.Static method / Static variable belongs to class.
         2.Static method are called by Class.
         3.Static method cannot be overRide.
         4.Static method can access only static member
         5.Instance method can access static member.
         6.Static variable is executed only once.
         7.Static method can access only static member variable

51.Static Nested Class = Static method / block will accept only static member variable;
                         Static Nested classes and Non-Static Nested class/InnerClass.
                       = OuterClass.StaticInnerClass innerClass = new OuterClass.StaticInnerClass();

52.Non-Static Nested class / Inner Classes  = instance variable and static variable are accepted inside InnerClass.
                                    OuterClass1.InnerClass in = new OuterClass1().new InnerClass();

 *** Anonymous InnerClass is instantiation of Interface

53.Package = Package is a folder in a file directory which contains same related files to avoid name conflicts
54.Recursion = Method calling Method
                Factorial (4! = 4*3*2*1 = 24)
                = Define base condition
55.Calling Method = return should be your last execution step of your method

56.Throwable is the parent class of all Exceptions          Errors.
 checked Exceptions/Compile Time        IO Exception        JVM Error
                                        SQL Exception       Memory
                                        ClassNotFound       Framework
                                        Runtime/ Un-checked Exceptions
                                            Arithmetic
                                            NumberFormat
Checked Exceptions/Compile Time Exceptions= means which can be handled by the Developer.
            1. IO-Exception (occurs during File writing and reading)
            2. SQL-Exception (occurs during talking to the database, writting SQL queries)
            3. ClassNotFound (when class is not found in the runtime)

Runtime Exception / Un-checked Exceptions = because you find it during Runtime.
                    1. Arithmetic Exception (100/0).
                    2. NullPointerException (String a = null sout(a.charAt(0)))

Error = which is not the responsibility of the developer and developer can do nothing.
throws Arithmetic Exception, NullPointerException.

57.Try Catch = 1.We can rethrow exception from catch block using (throw e) keyword.
            2.try/catch, try/catch/finally, try/finally(can write without catch block).
            3.catch(ArithmeticException | IndexOutOfBoundsException) we can write two exception in one catch block.
**Nested Try Catch.

58.Hashcode = Object class is the super class of any class we create in JAVA.
63.Enum  = 1.Enum is total Constant.
        2.Initialize enum (Enum e = Enum.Day)

64.Annotation = Annotation is described with ("@") symbol.
             2.@Override = annotation name override.
             3.@SuppressWarnings.
65. Serialization = The process of converting an Object to Byte so it can be send over a network called serialization.
    Deserialization = the process of converting back the Byte from network to Java Object is called Deserialization.
66.Threads and Processes:  1.Threads are called as lightweight Processes
                      2.Process can have multiple Threads.
                      3.Threads exist within Process

                      1.extend Thread => override run method
                      2.implements Runnable.

                      MyThread myThread = new MyThread();
                      Thread thread = new Thread(new yourThread());
                      myThread.start();
                      thread.start();

                      Thread.sleep();

68. Auto Boxing      : Converting int(primitive datatype) to Integer(Object Wrapper Class).
    Auto Unboxing    : Converting Integer(Object Wrapper Class) to int(primitive datatype).
    Integer i1 = Integer.valueOf(i); //converting primitive datatype to Object Wrapper Class
    //Auto_UnBox
            int i3 = i1;
69.IO Streams :
71.Generics : public class MyClass<T>{} //T is the default standard
73.String : String is immutable(String once created cannot be changed/overwritten).
         String is a Special kind of Datatype.
        .length()
        .concat()
        .format(%s is for string, %d is for int, %f for float)
        .charAt()
        .equals()
        .index()
        .replace()
        .lastIndexOf()
        .subString(1, 5) to trim the part of the String.
         charAt 1 is included but charAt 5 is not