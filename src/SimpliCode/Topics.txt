1.Java Introduction(JDK,JRE,JVM)

Java was created in 1991 but was released in 1995, and it was developed by James Gosling at Sun MicroSystems and later acquired by Oracle.
    *** Usage: Mobile Application, Web Application, Desktop Application, Gaming Application.
    *** Features :
                    1.Object-Oriented.          (everything happens in java happens around object)
                    2.Platform Independent.
                    3.Strong Type-Checking.
                    4.Compile & Interpret
                    5.Garbage collector         (it removes unused variables and objects from memory)
                    6.Multi-threading           (OS ==> Processor ==> Threads)
                    7.Secure                    (doesn't have pointers which leads to memory leakage like C and C++)
                    8.Robust

                   Java Source Code ==> Java Compiler ==> Java Byte Code ==> Java Interpreter ==> Machine Code
                        .java             Compilation         .class            Interpret           Output

    *** Java Compiler      = Java compiler compiles the Java source code into the Java bytecode.
    *** Java Interpreter   = Java interpreter converts or translates the bytecode into the machine-understandable format i.e. machine code.

JDK (Java Development Kit)
    JRE (Java Runtime Environment)
        JVM (Java Virtual Machine), Class Libraries, Other Libraries.

2&3 installation.

4.Primitive DataTypes = byte, short, int, long, float, double, boolean, char.
                        ** Primitive DataTypes are supported by Java
5.NonPrimitive DataTypes = String, array, class.
                        ** String is a collection of continuous sequence of Characters of same data type.
                        ** String and Arrays are immutable
                        ** Custom in nature
                        ** Array Exception = ArrayIndexOutOfBound

6.Token = pre_defined Keywords, Identifiers, Constant, Special Symbols, Operators.

7.Datatype Casting / Conversion =
                                1.Implicit Datatype casting/conversion, small ==> large ==> largest
                                2.Explicit Datatype casting/conversion. small <== large <== largest

8.Package = Package is a folder which contains related files
            SupperClass = java.lang.Object.
            System is a Class;
            out,in,err = stream
            println(), print(), printf() = method
        *** new keyword is used to initialize anything in Java***

9.Array =   Array is a collection of continuous sequence of Elements of same data type.
            Array is immutable
            index(length-1);
            Array Exception = ArrayIndexOutOfBound

*** Operators ***

10.Arithmetic Operator(+,-,/,*,%)

11.Unary Operator = increment, decrement (++,--,!,+,-) (+1 used with 1 variables)

12. 1)Comparison/Relational Operator = (==,!=,<,>,<=,>=)
    *** if(Comparison/Relational Operator){}
    2)Logical Operator = (&& , ||) OR (AND , ||)

Assignment Operator (=)
13.Bitwise (Ignore)

*** Statements ***

14.If Else Statement
15. 1)Nested If (If inside If) next block is dependent on previous block
    2)Ternary operator (condition ? true : false) only if you one statement
16.Switch Statement.
17. 2D Array ([][])     x-y axis
    1D Array ([])       x-axis
18. 3D Array ([][][])   x-y-z axis

***Loop***

19.do While Loop
20.while Loop       while(boolean)
21.for Loop (iterate)
22.Enhanced ForLoop (used in Arrays, List, Map)
23.Nested For Loop

24 & 25.Collections:
Set = unique
list = duplicate, index.
Map<key, value>

Queue = FIFO
Stack = LIFO

            26.ArrayList.
            List<String> name = new Arraylist<>();
              Interface           class
            Exception = IndexOutOfBoundsException

            27.LinkedList = add, addFirst, addLast, remove, removeFirst, removeLast.
            28.HashSet = no duplicates random access element collection list (if you run the hashset again and again you can see different orders).
            29.TreeSet = no duplicates and natural order of sequence ( a-z ) like sorting.
            30.Map = "Key" are unique and stored as "Set" class because "Set" class does not allow duplicates.
                    "value" can be duplicates and are stored in "list" class.
            6.HashMap = (key, value) called "Entry"
            Eg: Map.Entry<Integer, String> b : has.entrySet()
                b.getKey(), b.getValue()
            7.TreeMap = (key, value) called "Entry"
                        Eg: Map.Entry<Integer, String> b : has.entrySet()
                            b.getKey(), b.getValue()
                            = natural sorting order i.e (a-z)(0-9).

            8.Stack = LIFO
                    = push is to used to insert element.
                    = pop is to used to take element out of the stack.
                    = peep is to used to view not to remove.

            9.Queue = FIFO ( 1st element = Head || Last element = Tail)
                    = add
                    = remove = can only remove the element
                    = peek
                    = poll = remove the element and return the element (see the head and remove the head)

35.Class = class is a blueprint which is required to create an object and its logical entity.
36.Constructor = A Constructor is a special kind of method.
37.Streams =         List<Integer> str = num.stream().map(x -> x*x).collect(Collectors.toList());
                  List<Integer> add = num.stream().map(x->x+x).collect(Collectors.toList());
                  //collect(Collectors.toList()); to convert stream to list
                  //map(x->x+x) formula

31-07-2021
Access Modifiers = Public       (Class, Package, SubClass, World (outside the Package)).
                   Protected    (Class, Package, SubClass(of SuperClass of same Package)).
                   Default      (Class, Package).   (No Modifier)
                   Private      (Class).

Inheritance (IS-A relation)=
              SubClass extends SuperClass
              ChildClass extends ParentClass
              DerivedClass extends BaseClass

Encapsulation:
                private attributes / properties/ variables (to hide properties from the world)

Abstraction = 1) abstract class should have at least one abstract method.
              2) can have normal class
              3)It cannot be instantiated and cannot have default constructor
              3)But when Child class extends Parent class then Child class constructor can invoke Parent class constructor indirectly.
              Parent child                              = new Child();
              reference of Parent abstract class        //concrete class object
              child.name();                             //method from child class will be called

Interface = 1.Can have Constants(public static final).
            2.Total Abstract.
            3.Only declare methods but not implement
            4.Subclass implements SuperClass
            5.Override means SubClass method is overriding the SuperClass method
            6.Interface can instantiate with Anonymous Class.

Multiple Inheritance:
            1.Multiple Inheritance is not supported in Java using Classes.
            2.Multiple Inheritance is supported in Java using Interfaces.
            3.{
                Implement
               }

Method OverLoading :
            1.Name of the method should be same.
            2.No of Parameters can change.
            3.Parameter Datatype can change.

MethodOverRiding :
            1.MethodOverRiding is used with the help of Inheritance.
            2.Instance method / Instance variable belongs to object.
            3.Static method / Static variable belongs to class.
            4.Static method are called by Class
            5.Static method cannot be overRide.
            Eg : className.StaticMethodName.
            Eg : className.StaticVariableName.

Static = 1.Static method / Static variable belongs to class.
         2.Static method are called by Class.
         3.Static method cannot be overRide.
         4.Static method can access only static member
         5.Instance method can access static member.
         6.Static variable is executed only once.

Static Nested Class = OuterClass.StaticInnerClass innerClass = new OuterClass.StaticInnerClass();
Inner Classes       = OuterClass1.InnerClass in = new OuterClass1().new InnerClass();
Anonymous Class
Package
Recursion = Factorial (4! = 4*3*2*1 = 24)
          = Define base condition

Throwable is the parent class of all Exceptions and Errors.

Exception = means which can be handled by the Developer.
            1. IO-Exception (occurs during File writing and reading)
            2. SQL-Exception (occurs during talking to the database, writting SQL queries)
            3. ClassNotFound (when class is not found in the runtime)

Runtime Exception = because you find it during Runtime.
                    1. Arithmetic Exception (100/0).
                    2. NullPointerException (String a = null sout(a.charAt(0)))

Error = which is not the responsibility of the developer and developer can do nothing.
throws Arithmetic Exception, NullPointerException.

Try Catch = 1.We can rethrow exception from catch block using (throw e) keyword.
            2.try/catch, try/catch/finally, try/finally(can write without catch block).
            3.catch(ArithmeticException | IndexOutOfBoundsException) we can write two exception in one catch block.
**Nested Try Catch.
**Object class is the super class of any class we create in JAVA.

Enum  = 1.Enum is total Constant.
        2.Initialize enum (Enum e = Enum.Day)

Annotation = Annotation is described with ("@") symbol.
             2.@Override = annotation name override.
             3.@SuppressWarnings.

Threads and Process:  1.Threads are called as lightweight Processes
                      2.Process can have multiple Threads.
                      3.Threads exist within Process

                      1.extend Thread => override run method
                      2.implements Runnable.

                      Thread myThread = new Thread();
                      myThread.start();

                      Thread.sleep();

Auto Boxing      : Converting int(primitive datatype) to Integer(Object Wrapper Class).
Auto Unboxing    : Converting Integer(Object Wrapper Class) to int(primitive datatype).

String : String is immutable(String once created cannot be changed/overwritten).
         String is a Special kind of Datatype.
        .length()
        .concat()
        .format(%s is for string, %d is for int, %f for float)
        .charAt()
        .equals()
        .index()
        .replace()
        .lastIndexOf()
        .subString(1, 5) to trim the part of the String.
         charAt 1 is included but charAt 5 is not

Generics : public class MyClass<T>{} //T is the default standard